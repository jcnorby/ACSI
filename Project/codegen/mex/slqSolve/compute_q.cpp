/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * compute_q.cpp
 *
 * Code generation for function 'compute_q'
 *
 */

/* Include files */
#include "mwmathutil.h"
#include "rt_nonfinite.h"
#include "slqSolve.h"
#include "compute_q.h"

/* Function Definitions */
real_T compute_q(real_T t, const real_T in2[12], const real_T in3[6], const
                 real_T in4[12], const real_T in5[6], const real_T in6[12],
                 real_T t_wp)
{
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t5;
  real_T t6;
  real_T t7;
  real_T t8;
  real_T t9;
  real_T t10;
  real_T t11;
  real_T t12;
  real_T t13;

  /* COMPUTE_Q */
  /*     Q = COMPUTE_Q(T,IN2,IN3,IN4,IN5,IN6,T_WP) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.1. */
  /*     07-Nov-2018 09:38:16 */
  t2 = in2[3] - in4[3];
  t3 = in2[0] - in4[0];
  t4 = in2[1] - in4[1];
  t5 = in2[5] - in4[5];
  t6 = in2[2] - in4[2];
  t7 = t - t_wp;
  t8 = in2[10] - in4[10];
  t9 = in2[9] - in4[9];
  t10 = in2[6] - in4[6];
  t11 = in2[7] - in4[7];
  t12 = in2[8] - in4[8];
  t13 = in2[4] - in4[4];
  return (((((((((((((((((in3[0] * 0.5 - in5[0] * 0.5) * (in3[0] - in5[0]) +
    (in3[1] * 0.5 - in5[1] * 0.5) * (in3[1] - in5[1])) + (in3[2] * 0.5 - in5[2] *
    0.5) * (in3[2] - in5[2])) + (in3[3] * 0.5 - in5[3] * 0.5) * (in3[3] - in5[3]))
                      + (in3[4] * 0.5 - in5[4] * 0.5) * (in3[4] - in5[4])) +
                     (in3[5] * 0.5 - in5[5] * 0.5) * (in3[5] - in5[5])) +
                    muDoubleScalarExp(t7 * t7 * -100.0) * ((((((((((((in2[4] *
    1000.0 - in6[4] * 1000.0) * (in2[4] - in6[4]) * 5.6418958354775626 + (in2[3]
    * 1000.0 - in6[3] * 1000.0) * (in2[3] - in6[3]) * 5.6418958354775626) +
    (in2[0] * 1000.0 - in6[0] * 1000.0) * (in2[0] - in6[0]) * 5.6418958354775626)
    + (in6[1] * 1000.0 - in2[1] * 1000.0) * (in6[1] - in2[1]) *
    5.6418958354775626) + (in6[5] * 1000.0 - in2[5] * 1000.0) * (in6[5] - in2[5])
    * 5.6418958354775626) + (in6[2] * 1000.0 - in2[2] * 1000.0) * (in6[2] - in2
    [2]) * 5.6418958354775626) + (in2[10] - in6[10]) * (in2[10] * 1000.0 - in6
    [10] * 1000.0) * 5.6418958354775626) + (in2[9] - in6[9]) * (in2[9] * 1000.0
    - in6[9] * 1000.0) * 5.6418958354775626) + (in2[6] - in6[6]) * (in2[6] *
    1000.0 - in6[6] * 1000.0) * 5.6418958354775626) + (in2[7] - in6[7]) * (in2[7]
    * 1000.0 - in6[7] * 1000.0) * 5.6418958354775626) + (in2[11] - in6[11]) *
    (in2[11] * 1000.0 - in6[11] * 1000.0) * 5.6418958354775626) + (in2[8] - in6
    [8]) * (in2[8] * 1000.0 - in6[8] * 1000.0) * 5.6418958354775626)) + t2 * t2)
                  + t3 * t3) + t4 * t4) + t5 * t5) + t6 * t6) + t8 * t8) + t9 *
             t9) + t10 * t10) + t11 * t11) + t12 * t12) + t13 * t13;
}

/* End of code generation (compute_q.cpp) */
