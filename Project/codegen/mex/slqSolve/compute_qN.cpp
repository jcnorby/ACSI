/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * compute_qN.cpp
 *
 * Code generation for function 'compute_qN'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "slqSolve.h"
#include "compute_qN.h"

/* Function Definitions */
real_T compute_qN(const real_T in1[12], const real_T in2[12])
{
  /* COMPUTE_QN */
  /*     QN = COMPUTE_QN(IN1,IN2) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.1. */
  /*     07-Nov-2018 09:38:18 */
  return (((((((((((in1[4] * 10000.0 - in2[4] * 10000.0) * (in1[4] - in2[4]) +
                   (in1[3] * 10000.0 - in2[3] * 10000.0) * (in1[3] - in2[3])) +
                  (in1[0] * 10000.0 - in2[0] * 10000.0) * (in1[0] - in2[0])) +
                 (in2[1] * 10000.0 - in1[1] * 10000.0) * (in2[1] - in1[1])) +
                (in2[5] * 10000.0 - in1[5] * 10000.0) * (in2[5] - in1[5])) +
               (in2[2] * 10000.0 - in1[2] * 10000.0) * (in2[2] - in1[2])) +
              (in1[10] - in2[10]) * (in1[10] * 10000.0 - in2[10] * 10000.0)) +
             (in1[9] - in2[9]) * (in1[9] * 10000.0 - in2[9] * 10000.0)) + (in1[6]
             - in2[6]) * (in1[6] * 10000.0 - in2[6] * 10000.0)) + (in1[7] - in2
            [7]) * (in1[7] * 10000.0 - in2[7] * 10000.0)) + (in1[11] - in2[11]) *
          (in1[11] * 10000.0 - in2[11] * 10000.0)) + (in1[8] - in2[8]) * (in1[8]
    * 10000.0 - in2[8] * 10000.0);
}

/* End of code generation (compute_qN.cpp) */
