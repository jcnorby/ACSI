/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * compute_qN.cpp
 *
 * Code generation for function 'compute_qN'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "computeSLQTrajHoop.h"
#include "compute_qN.h"

/* Function Definitions */
real_T compute_qN(const real_T in1[12], const real_T in2[12])
{
  real_T a;
  real_T b_a;
  real_T c_a;

  /* COMPUTE_QN */
  /*     QN = COMPUTE_QN(IN1,IN2) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     10-Dec-2018 00:20:13 */
  a = in1[9] - in2[9];
  b_a = in1[11] - in2[11];
  c_a = in1[10] - in2[10];
  return (((((((((((in1[3] * 100.0 - in2[3] * 100.0) * (in1[3] - in2[3]) + (in1
    [5] * 100.0 - in2[5] * 100.0) * (in1[5] - in2[5])) + (in1[4] * 100.0 - in2[4]
    * 100.0) * (in1[4] - in2[4])) + (in1[0] * 100000.0 - in2[0] * 100000.0) *
                 (in1[0] - in2[0])) + (in2[1] * 100000.0 - in1[1] * 100000.0) *
                (in2[1] - in1[1])) + (in2[2] * 100000.0 - in1[2] * 100000.0) *
               (in2[2] - in1[2])) + a * a) + b_a * b_a) + c_a * c_a) + (in1[6] -
            in2[6]) * (in1[6] * 100000.0 - in2[6] * 100000.0)) + (in1[7] - in2[7])
          * (in1[7] * 100000.0 - in2[7] * 100000.0)) + (in1[8] - in2[8]) * (in1
    [8] * 100000.0 - in2[8] * 100000.0);
}

/* End of code generation (compute_qN.cpp) */
