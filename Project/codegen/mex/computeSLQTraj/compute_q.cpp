/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * compute_q.cpp
 *
 * Code generation for function 'compute_q'
 *
 */

/* Include files */
#include "mwmathutil.h"
#include "rt_nonfinite.h"
#include "computeSLQTraj.h"
#include "compute_q.h"

/* Function Definitions */
real_T compute_q(real_T t, const real_T in2[12], const real_T in3[4], const
                 real_T in5[4], const real_T in6[12], real_T t_wp)
{
  real_T t2;

  /* COMPUTE_Q */
  /*     Q = COMPUTE_Q(T,IN2,IN3,IN4,IN5,IN6,T_WP) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.1. */
  /*     25-Nov-2018 15:45:00 */
  t2 = t - t_wp;
  return ((((((((((((((((in3[0] * 1000.0 - in5[0] * 1000.0) * (in3[0] - in5[0])
                        + (in3[1] * 1000.0 - in5[1] * 1000.0) * (in3[1] - in5[1]))
                       + (in3[2] * 1000.0 - in5[2] * 1000.0) * (in3[2] - in5[2]))
                      + (in3[3] * 1000.0 - in5[3] * 1000.0) * (in3[3] - in5[3]))
                     + muDoubleScalarExp(t2 * t2 * -50.0) * (((((((((in2[3] *
    100.0 - in6[3] * 100.0) * (in2[3] - in6[3]) * 3.9894228040143269 + (in2[5] *
    100.0 - in6[5] * 100.0) * (in2[5] - in6[5]) * 3.9894228040143269) + (in2[4] *
    100.0 - in6[4] * 100.0) * (in2[4] - in6[4]) * 3.9894228040143269) + (in2[0] *
    10000.0 - in6[0] * 10000.0) * (in2[0] - in6[0]) * 3.9894228040143269) +
    (in6[1] * 10000.0 - in2[1] * 10000.0) * (in6[1] - in2[1]) *
    3.9894228040143269) + (in6[2] * 10000.0 - in2[2] * 10000.0) * (in6[2] - in2
    [2]) * 3.9894228040143269) + (in2[6] - in6[6]) * (in2[6] * 100.0 - in6[6] *
    100.0) * 3.9894228040143269) + (in2[7] - in6[7]) * (in2[7] * 100.0 - in6[7] *
    100.0) * 3.9894228040143269) + (in2[8] - in6[8]) * (in2[8] * 100.0 - in6[8] *
    100.0) * 3.9894228040143269)) + (in2[0] * 10.0 - 10.0) * (in2[0] - 1.0)) +
                   (in2[1] * 10.0 - 10.0) * (in2[1] - 1.0)) + (in2[2] * 10.0 -
    10.0) * (in2[2] - 1.0)) + in2[9] * in2[9] * 10.0) + in2[11] * in2[11] * 10.0)
               + in2[10] * in2[10] * 10.0) + in2[6] * in2[6] * 10.0) + in2[7] *
             in2[7] * 10.0) + in2[8] * in2[8] * 10.0) + in2[3] * in2[3] * 10.0)
          + in2[5] * in2[5] * 10.0) + in2[4] * in2[4] * 10.0;
}

/* End of code generation (compute_q.cpp) */
